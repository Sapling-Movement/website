<!DOCTYPE html>
<html lang="{{ lang }}">
<head>
  <meta charset="UTF-8">
  <meta http-equiv="X-UA-Compatible" content="IE=edge">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>{{ title }}</title>
  <link rel="stylesheet" href="/css/styles.css">
  <link rel="icon" href="/favicon.svg">

  {# {% for lang_key, lang_data in languages %}
    {% for _page in collections.all %}
      {% if (_page.data.lang === lang_key) and (_page.data.key === key) %}
        <link
          rel="alternate"
          hreflang="{{ lang_key }}"
          href="{{ production_url }}{{ _page.data.page.url }}"
        />
      {% endif %}
    {% endfor %}
  {% endfor %} #}
</head>
<body>
  {% include 'components/navigation.njk' %}
  <main class="container">
    <div class="container--narrow flow">
      <h1>
        {% if _data.pageBase.h1Title %}{{ _data.pageBase.h1Title }}{% else %}{{ title }}{% endif %}
      </h1>
      {{ content | safe }}
    </div>
    {% if env == "dev" %}
    <details>
      <summary>data</summary>
      <pre>
        {{- _data | dump(2) }}
      </pre>
    </details>
    {% endif %}
  </main>

  <script>
    (function() {
    const className = 'reel';
    const reels = Array.from(document.querySelectorAll(`.${className}`));
    const toggleOverflowClass = elem => {
      elem.classList.toggle('overflowing', elem.scrollWidth > elem.clientWidth);
    };

    for (let reel of reels) {
      if ('ResizeObserver' in window) {
        new ResizeObserver(entries => {
          toggleOverflowClass(entries[0].target);
        }).observe(reel);
      }

      if ('MutationObserver' in window) {
        new MutationObserver(entries => {
          toggleOverflowClass(entries[0].target);
        }).observe(reel, {childList: true});
      }
    }
  })();
  </script>
</body>
</html>
